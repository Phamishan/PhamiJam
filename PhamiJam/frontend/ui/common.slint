import { Button, VerticalBox, HorizontalBox, ProgressIndicator, Slider, GridBox } from "std-widgets.slint";
export global globalVariables {
    in-out property <int> activePage: 0;
    in-out property <float> count: 0;
    in-out property <bool> paused: true;
    in-out property <string> username;
    in-out property <[string]> mp3_list;
    in-out property <string> songPath;
    in-out property <[[StandardListViewItem]]> rows;
    in-out property <[string]> songNameArray;
    in-out property <string> songName;
    in-out property <[string]> artistNameArray;
    in-out property <string> artistName;
    in-out property <int> volume: 20;
}

export component Divider {
    Rectangle {
        background: #3b3a3a;
        height: 5px;
    }
}

export component HomeBtn {
    Button {
        icon: @image-url(".././assets/home.png");
        text: "Home";
        clicked() => {
            globalVariables.activePage = 2;
        }
    }
}

export component ProfileBtn {
    Button {
        icon: @image-url(".././assets/profile.png");
        text: "Profile";
        clicked() => {
            globalVariables.activePage = 3;
        }
    }
}

export component LibraryBtn {
    Button {
        icon: @image-url(".././assets/library.png");
        text: "Library";
        clicked() => {
            globalVariables.activePage = 5;
        }
    }
}

export component CreatePlaylist {
    Button {
        icon: @image-url(".././assets/createPlaylist.png");
        text: "Create Playlist";
        clicked() => {
            globalVariables.activePage = 6;
        }
    }
}

export component Interface {
    @children
    timer := Timer {
        interval: 1ms;
        running: false;
        triggered() => {
            if globalVariables.count >= 10 {
                self.running = false;
            }
            globalVariables.count = globalVariables.count + 0.01;
            //debug(globalVariables.count);
        }
    }

    GridLayout {
        Rectangle {
            background: #121212;
            width: 150px;
            VerticalBox {
                padding: 25px;
                alignment: space-around;
                HomeBtn { }

                Divider { }

                ProfileBtn { }

                Divider { }

                LibraryBtn { }

                Divider { }

                CreatePlaylist { }
            }
        }

        Rectangle {
            GridBox {
                padding-top: 30px;
                Text {
                    row: 0;
                    col: 0;
                    colspan: 2;
                    text: globalVariables.artistName + " - " + globalVariables.songName;
                    width: 35%;
                    font-size: 18px;
                    overflow: elide;
                }

                Button {
                    row: 0;
                    col: 2;
                    height: parent.height / 2;
                    width: 100px;
                    icon: @image-url(".././assets/l.png");
                }

                Button {
                    row: 0;
                    col: 3;
                    height: parent.height / 2;
                    width: 100px;
                    icon: globalVariables.paused ? @image-url(".././assets/play.png") : @image-url(".././assets/pause.png");
                    clicked() => {
                        globalVariables.paused = !globalVariables.paused;
                            // timer.running = !globalVariables.paused;
                            if (globalVariables.paused) {
                            callbacks.stop_song();
                        } else {
                            callbacks.play_song(globalVariables.songPath);
                                //timer.running = true;
                            }
                    }
                }

                Button {
                    row: 0;
                    col: 4;
                    height: parent.height / 2;
                    width: 100px;
                    icon: @image-url(".././assets/r.png");
                }

                speaker := Button {
                    row: 0;
                    col: 6;
                    height: parent.height / 2;
                    width: 100px;
                    icon: @image-url(".././assets/speakerTrans.png");
                    clicked() => {
                        globalVariables.volume = globalVariables.volume == 0 ? 20 : 0;
                        volumeControl.value = volumeControl.value == 0 ? 20 : 0;
                        speaker.icon = globalVariables.volume == 0 ? @image-url(".././assets/speakerOff.png") : @image-url(".././assets/speakerTrans.png");
                    }
                }

                volumeControl := Slider {
                    row: 0;
                    col: 7;
                    minimum: 0;
                    maximum: 100;
                    value: 20;
                    step: 10;
                    width: 125px;
                    released(value) => {
                        debug(value);
                        globalVariables.volume = value;
                        if (value == 0) {
                            speaker.icon = @image-url(".././assets/speakerOff.png");
                        } else {
                            speaker.icon = @image-url(".././assets/speakerTrans.png");
                        }
                    }
                }

                Rectangle {
                    Text {
                        text: globalVariables.volume;
                        color: black;
                    }

                    width: 25px;
                    row: 0;
                    col: 8;
                }
            }

            VerticalBox {
                alignment: start;
                padding-bottom: 100px;
                ProgressIndicator {
                    padding-top: 100px;
                    height: 10px;
                    progress: globalVariables.count / 10;
                }
            }

            background: #b5832e;
            height: 80px;
            colspan: 2;
            row: 1;
        }
    }
}

export component PlaylistBtn inherits Rectangle {
    in-out property text <=> txt.text;
    callback clicked <=> touch.clicked;
    border-radius: 10px;
    background: touch.pressed ? #b5832e : touch.has-hover ? #b5842ea2 : #b5832e;
    txt := Text {
        x: (parent.width - self.width) / 2 + (touch.pressed ? 2px : 0);
        y: (parent.height - self.height) / 2 + (touch.pressed ? 1px : 0);
        color: touch.pressed ? #fff : #eee;
    }

    touch := TouchArea { }
}

export global callbacks {
    callback register(string, string, string);
    callback login(string, string);
    callback logout();
    callback getUserInfo();
    callback createPlaylist(string, string);
    callback scan_files();
    callback play_song(string);
    callback stop_song();
}
